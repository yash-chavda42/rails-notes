difference between rspec and minitest 
- Syntax 
- Features - RSpec offers more features and functionality than MiniTest
- MiniTest provides a simpler, more lightweight testing framework that may be more suitable for smaller projects.
- RSpec integrates with other tools and libraries more easily than MiniTest

#minitest
helpers/                         
mailers/                         
system/
channels/                        
fixtures/                        
integration/                     
models/   

- helpers, mailers, and models directories are meant to hold tests for view helpers
- The channels directory is meant to hold tests for Action Cable connection and channels. 
- The controllers directory is meant to hold tests for controllers, routes, and views.
- The integration directory is meant to hold tests for interactions between controllers.
- test class are inherit from ActiveSupport::TestCase and superclass is Minitest::Test

- assert true - An assertion is a line of code that evaluates an object (or expression) for expected results.

#Brief Note About Test Cases
ActiveSupport::TestCase
ActionMailer::TestCase
ActionView::TestCase
ActiveJob::TestCase
ActionDispatch::IntegrationTest
ActionDispatch::SystemTestCase
Rails::Generators::TestCase

#test runner
bin/rails test - this run all test form project.
bin/rails test test/models/article_test.rb - we can define particuler file for testing.
bin/rails test test/models/article_test.rb -n test_the_truth - we can also run particuler test.
bin/rails test test/controllers - run test from specific directory

#Parallel Testing
-  Parallel Testing refers to the practice of running tests in parallel, which means running multiple test suites concurrently on different CPU cores.
- Running tests in parallel reduces the time it takes your entire test suite to run.
- Parallel Testing with Processes
  - The number of workers passed is the number of times the process will be forked.
  - The default parallelization method is to fork processes using Ruby's DRb system.			
- Parallel Testing with Threads
  - instead of spawning multiple processes, this approach uses threads to run tests in parallel within a single process. 
  	
- Testing Parallel Transactions
  - Parallel transactions can occur when multiple users or processes try to modify the same data simultaneously, 
  	
- Threshold to parallelize tests
  - This threshold is typically determined by considering the overhead of parallelization, such as the time required to spin up and manage multiple processes or threads, versus the potential speedup gained by executing tests in parallel.
  
#The Test Database
- if there were modifications to existing migrations, the test database needs to be rebuilt. This can be done by executing bin/rails db:test:prepare.

#Model Testing
rails generate test_unit:model article title:string body:text
under model we can check for all column validation.

#System Testing
bin/rails generate system_test articles - generate file for this

it checking working side of user like for all the functionality
 visit articles_path

  click_on "New Article"

  fill_in "Title", with: "Creating an Article"
  fill_in "Body", with: "Created this article successfully!"

  click_on "Create Article"

  assert_text "Creating an Article"
  
    
#Integration Testing
- rails generate integration_test blog_flow - generate file
- Integration tests are used to test how various parts of our application interact.
- They are generally used to test important workflows within our application.

test "can see the welcome page" do
  get "/"
  assert_select "h1", "Welcome#index"
end

test "can create an article" do
  get "/articles/new"
  assert_response :success
  post "/articles",
    params: { article: { title: "can create", body: "article successfully." } }
  assert_response :redirect
  follow_redirect!
  assert_response :success
  assert_select "p", "Title:\n  can create"
end



#Functional Tests for Your Controllers
- this are information are checked in functional testing
was the web request successful?
was the user redirected to the right page?
was the user successfully authenticated?
was the appropriate message displayed to the user in the view?
was the correct information displayed in the response?
test "should get index" do
    get articles_url
    assert_response :success
end
- Available Request Types for Functional Tests
get
post
patch
put
head
delete
  
- Testing XHR (AJAX) requests
assert_equal "hello world", @response.body
assert_equal "text/javascript", @response.media_type

- The Three Hashes of the Apocalypse
cookies - Any cookies that are set
flash -   Any objects living in the flash
session - Any object living in session variables

- Instance Variables Available
@controller - The controller processing the request
@request - The request object
@response - The response object
- assert_equal "index", @controller.action_name
- assert_equal "application/x-www-form-urlencoded", @request.media_type
- assert_match "Articles", @response.body
- assert_equal "Article was successfully created.", flash[:notice]


#Testing Routes


#Testing Views
#Testing Helpers
#Testing Your Mailers
#Testing Jobs
#Testing Action Cable
#Testing Eager Loading
#Additional Testing Resources

