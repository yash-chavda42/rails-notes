difference between rspec and minitest 
- Syntax 
- Features - RSpec offers more features and functionality than MiniTest
- MiniTest provides a simpler, more lightweight testing framework that may be more suitable for smaller projects.
- RSpec integrates with other tools and libraries more easily than MiniTest

#minitest
helpers/                         
mailers/                         
system/
channels/                        
fixtures/                        
integration/                     
models/   

- helpers, mailers, and models directories are meant to hold tests for view helpers
- The channels directory is meant to hold tests for Action Cable connection and channels. 
- The controllers directory is meant to hold tests for controllers, routes, and views.
- The integration directory is meant to hold tests for interactions between controllers.
- test class are inherit from ActiveSupport::TestCase and superclass is Minitest::Test

#assert true - An assertion is a line of code that evaluates an object (or expression) for expected results. For example, an assertion can check:
- does this value = that value?
- is this object nil?
- does this line of code throw an exception?
- is the user's password greater than 5 characters?
- there is many kind of assertion is available
- They are the ones that actually perform the checks to ensure that things are going as planned.
- refere the list of assertion from docs

#types of assert
assert
assert true
assert_equal
assert_not_equal
assert_same
assert_not_same
assert_nil
assert_not_nil
assert_empty
assert_not_empty
assert_includes	
assert_not_includes


#Brief Note About Test Cases
ActiveSupport::TestCase
ActionMailer::TestCase
ActionView::TestCase
ActiveJob::TestCase
ActionDispatch::IntegrationTest
ActionDispatch::SystemTestCase
Rails::Generators::TestCase
- Each of these classes include Minitest::Assertions, allowing us to use all of the basic assertions in our tests.

#test runner
bin/rails test - this run all test form project.
bin/rails test test/models/article_test.rb - we can define particuler file for testing.
bin/rails test test/models/article_test.rb -n test_the_truth - we can also run particuler test.
bin/rails test test/controllers - run test from specific directory
bin/rails test -h - Check the documentation of the test runner

	
#Parallel Testing - we can test parallel
types - process, thread, transactions.
with process
-Technique that allows you to run your tests in parallel, on multiple processors or cores. This can significantly improve the time it takes to run your test suite.
with thread
- Parallel testing with threads is a technique that allows you to run your tests in parallel, on multiple threads. This can significantly improve the time it takes to run your test suite.
with multiple transection
- the process of ensuring that your code behaves correctly when multiple transactions are running at the same time.
- parallelize(workers: :number_of_processors, with: :threads)

#Threshold to parallelize tests 
- the default threshold for parallelizing tests is 50. This means that if you have less than 50 tests, they will be run serially. If you have more than 50 tests, they will be run in parallel, 

#if we have done changes in database and we want to update our testing environment database then - bin/rails db:test:prepare

#fixtures 
- Fixtures allow you to populate your testing database with predefined data before your tests run.
users(:david) - in user.yml we are accessing date from name :david
users(:david, :steve) - return an array containing the fixtures david and steve
		
#The Test Database
- if there were modifications to existing migrations, the test database needs to be rebuilt. This can be done by executing bin/rails db:test:prepare.

#unit testing - individual unit of code, such as classes, module and methods
#integration testing - how different unit of code intrect with each other.


#Model Testing
rails generate test_unit:model article title:string body:text
- this kind of test we are checking in model testing
Validations: ensuring that required fields are present, and that data meets any additional constraints or formatting requirements.
Associations: ensuring that relationships between models are properly set up, and that creating or deleting records in one model updates the associated records in other models.
Scopes: ensuring that named scopes are properly defined and return the expected records.
Callbacks: ensuring that model callbacks (such as before_save or after_create) are properly triggered and perform the expected actions.
Business logic: testing any custom methods or calculations defined in the model that aren't covered by the above categories.

#Screenshot Helper - used to take screenshot of our test. This can be helpful for viewing the browser at the point a test failed.
two method - take_screenshot, take_failed_screenshot. 
	

#System Testing 
- System testing in Rails is the process of testing your application as a whole, from start to finish.
- Functional Testing: It is a black-box testing method, which means that the tester does not know the internal implementation of the application. Instead, the tester focuses on the inputs and outputs of the application and verifies that the application behaves as expected.

- Non-functional Testing: This type of testing focuses on the non-functional aspects of the system, such as performance, security, usability, and reliability. Examples of non-functional testing include load testing, security testing, accessibility testing, and compatibility testing.

- User Acceptance Testing (UAT): This type of testing is typically conducted by end-users to verify that the system or application meets their requirements and is ready for deployment. UAT is often the final step in the testing process before the system is released to production.


bin/rails generate system_test articles - generate file for this
- verifies the behavior of a complete and integrated system or application.
- It tests the system as a whole.
- tests your application as if a real user were using it

it checking working side of user like for all the functionality
  visit articles_path

  click_on "New Article"

  fill_in "Title", with: "Creating an Article"
  fill_in "Body", with: "Created this article successfully!"

  click_on "Create Article"

  assert_text "Creating an Article"
  
#Changing the default settings
- setting are in application_system_test_case.rb so can change there 
- we can chnage browser setting from there.

#Integration Testing
- rails generate integration_test blog_flow - generate file
- Integration testing in Ruby on Rails involves testing the interactions between different parts of your application, including the user interface, controllers, models, and other components. 
- For dealing with the integration test runner, see ActionDispatch::Integration::Runner.
- performing requests, we will have ActionDispatch::Integration::RequestHelpers available for our use.
- Don't forget to call follow_redirect! if you plan to make subsequent requests after a redirect is made.


- User Flows: This type of testing involves simulating user interactions with the application, such as filling out a form, submitting a request, and viewing the response. 

- Controller Testing: This type of testing focuses on testing the controllers that handle requests and responses in your application. It ensures that the controllers properly handle different input data and 
respond with the expected output.

- Model Testing: This type of testing involves testing the models that interact with the database and perform business logic. It ensures that the models properly handle data validation, associations, and other 
operations. 
- For dealing with the integration test runner, see ActionDispatch::Integration::Runner
- When performing requests, we will have ActionDispatch::Integration::RequestHelpers available for our use.

test "can see the welcome page" do
  get "/"
  assert_select "h1", "Welcome#index"
end

test "can create an article" do
  get "/articles/new"
  assert_response :success
  post "/articles",
    params: { article: { title: "can create", body: "article successfully." } }
  assert_response :redirect
  follow_redirect!
  assert_response :success
  assert_select "p", "Title:\n  can create"
end



#Functional Tests for Your Controllers
- this are information are checked in functional testing
was the web request successful?
was the user redirected to the right page?
was the user successfully authenticated?
was the appropriate message displayed to the user in the view?
was the correct information displayed in the response?
test "should get index" do
    get articles_url
    assert_response :success
end
- Available Request Types for Functional Tests
get
post
patch
put
head
delete
  
- Testing XHR (AJAX) requests
article = articles(:one)
get article_url(article), xhr: true
assert_equal "hello world", @response.body
assert_equal "text/javascript", @response.media_type

- The Three Hashes of the Apocalypse
cookies - Any cookies that are set
flash -   Any objects living in the flash
session - Any object living in session variables

- Instance Variables Available
@controller - The controller processing the request
@request - The request object
@response - The response object
- assert_equal "index", @controller.action_name
- assert_equal "application/x-www-form-urlencoded", @request.media_type
- assert_match "Articles", @response.body
- assert_equal "Article was successfully created.", flash[:notice]


#to apply dry concept
setup do
    @article = articles(:one)
end
- now we can use this @article in every test of this file.
  
#Testing Routes
- we can test our router inside test/controllers as part of controller test.

#Testing Views
- inside test/controller we can do it.
- assert_select(selctor, message) - we can test view.

#Testing Helpers
- To avoid code duplication, you can add your own test helpers. Sign in helper can be a good example
- we can do it in inside module and then we can call this module.

#Testing Your Mailers
- The goals of testing your mailer classes are to ensure that:
- emails are being processed (created and sent)
- the email content is correct (subject, sender, body, etc)
- the right emails are being sent at the right times


#Testing Jobs
#Testing Action Cable
#Testing Eager Loading
#Additional Testing Resources

