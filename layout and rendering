#Creating Responses
render - send response in same request
redirect_to - send response in new request
head

#render
- The actual rendering is done by nested classes of the module ActionView::Template::Handlers. 
-  ActionController::Base#render method does the heavy lifting of rendering
- render "products/show" - render in differnet controller
- render template: "products/show" - template used in rails 2.2 version

- differnent way to render
render :edit
render action: :edit
render "edit"
render action: "edit"
render "books/edit"
render template: "books/edit"

#render with :inline -  if you're willing to use the :inline option to supply ERB as part of the method call.
- render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>"
- By default, inline rendering uses ERB. You can force it to use Builder instead with the :type option: - type: :builder - at the end

#Rendering Text
- render plain: "OK" - You can send plain text with plain option
- By default, if you use the :plain option, the text is rendered without using the current layout. If you want Rails to put the text into the current layout, you need to add the layout: true option and use the .text.erb extension for the layout file.

#Rendering HTML
render html: helpers.tag.strong('Not Found') - his is useful when you're rendering a small snippet of HTML code.

#Rendering JSON
render json: @product

#Rendering XML
render xml: @product

#Rendering Vanilla JavaScript
render js: "alert('Hello Rails');"

#Rendering raw body
render body: "raw"

#Rendering raw body
render body: "raw"

#render raw file 
render file: "#{Rails.root}/public/404.html", layout: false
- send_file is often a faster and better option if a layout isn't required.

#Rendering objects
render MyRenderable.new

#Options for render
:content_type - render template: "feed", content_type: "application/rss" - By default MIME content-type of text/html (or application/json if you use the :json option, or application/xml for the :xml option.).
:layout - render 
- layout: "special_layout" - to specify layout
- render layout: false - for no layout
:location - 
- render xml: photo, location: photo_url(photo) - You can use the :location option to set the HTTP Location header
:status - 
- render status: 500 - in most cases, this is 200 OK but we can change it.
200	:ok
201	:created
202	:accepted
400	:bad_request
401	:unauthorized
402	:payment_required
403	:forbidden
404	:not_found
422	:unprocessable_entity
500	:internal_server_error
:formats - :html by default
- render formats: :xml
- render formats: [:json, :xml]

:variants -
render variants: [:mobile, :desktop] - app/views/home/index.html+mobile.erb 

#layout
layout "inventory" - Specifying Layouts for Controllers
- we can also specify layout at runtime bu declaring method
- Conditional Layouts -   layout "product", except: [:index, :rss]
- layout false
- <%= render @products || "empty_list" %> - if there is no product then it will go to _empty_list.html.erb
#redirect_to 
- Another way to handle returning responses to an HTTP request
- redirect_back(fallback_location: root_path) -  return the user to the page they just came from, fallback_location: in case of browser is not store HTTP_REFERER.

Structuring Layouts
#Asset Tag Helpers
- auto_discovery_link_tag -  feed readers can use to detect the presence of RSS, Atom, or JSON feeds.
- javascript_include_tag - it will used as script tag, delclare js file.
- stylesheet_link_tag - link to css file.
- image_tag - link image
- video_tag - link video
- audio_tag - link audio file
- option for video and audio 
autoplay: true, starts playing the audio on page load
controls: true, provides browser supplied controls for the user to interact with the audio.
autobuffer: true, the audio will pre load the file for the user on page load.

#Understanding yield
<%= yield :head %> - we can define yield for head 
<%= yield %> - we can define yield for body
Using the content_for Method - The content_for method allows you to insert content into a named yield block in your layout

#partial - are another device for breaking the rendering process into more manageable chunks
<%= render "menu" %> - render partial as part of view
<%= render "shared/menu" %> - inside shared folder view

<%= render partial: "link_area", layout: "graybar" %> - provide layout to the partial

<%= render partial: "form", locals: {zone: @zone} %> - also pass local variable

<%= render partial: "customer", object: @new_customer %> - also pass object in partial
 
<%= render partial: "product", collection: @products %> - using collection we can pass all products -  collection option specifies the collection to loop through.
<p>Product Name: <%= product.name %></p> - _product.html.erb - and print here
<%= render partial: "product", collection: @products, layout: "special_layout" %> - we can also pass layout with collection

<%= render @customer %> - here it find _custromer.html.erb and render it

<%= render [customer1, employee1, customer2, employee2] %> - render multiple views one by one

<%= render(@products) || "There are no products available." %> - it return string if there is no product partial

<%= render partial: "product", collection: @products, as: :item %>

#spacer template 
<%= render partial: @products, spacer_template: "product_ruler" %> - Rails will render the _product_ruler partial (with no data passed in to it) between each pair of _product partials.


<%= render partial: "form", layout: %>
<%= render partial: "form", locals: {var: @var} %>



