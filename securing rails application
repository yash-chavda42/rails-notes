password:123@AbcD

#session

#Session hijacking - type of attack where an attacker takes control of a user's active session on a website or application
- Packet sniffing - An attacker can use a packet sniffer tool to intercept and monitor network traffic between the user's device and the server. If the traffic is not encrypted, the attacker can view the session ID in plain text and use it to hijack the user's session.
- man in the middle atteck - hacker between user and server

- Cross-Site Scripting - In an XSS attack, an attacker injects malicious code into a vulnerable website or application. When a user visits the site or application, the injected code executes in their browser, allowing the attacker to steal the user's session ID.
- Cross-site scripting (XSS) is a type of security vulnerability that allows an attacker to inject malicious code into a web page. This malicious code can then be executed by the victim's browser when they view the page. XSS attacks can be used to steal cookies, session tokens, and other sensitive information. They can also be used to hijack accounts, deface websites, and launch other attacks.

- Session fixation - In a session fixation attack, the attacker sets a known session ID for the user before they log in to the site or application. When the user logs in, their session is already hijacked by the attacker.

- Session prediction - Some web applications use predictable session IDs that can be guessed by an attacker. For example, if the session ID is based on the current timestamp, an attacker could use brute force techniques to guess valid session IDs.

#config.force_ssl = true - in production.rb file - Force all requests to use HTTPS - SSl
- encrypts all data that is transmitted between the client and the server, making it more difficult for attackers to intercept and read sensitive information like passwords, credit card numbers, or other personal data.
- you can potentially improve your website's search engine rankings and attract more visitors.

#in rails session store in encrypted in cookies storage so to encrpt session id atteker need secret key which is stored in secrets.yml file  
- Rails encrypts cookies by default. The client cannot read or edit the contents of the cookie, without breaking encryption.
here secret key is known as secret_key_base which is 
- it is important to regularly rotate the encryption and signing keys used for these cookies in order to maintain the security of your application
- rails secret - it will generate new secret key and signin key and then replace in place on old secret key and sign in key.
- we can also change sha1 to sha256 for strong encryption

#Replay Attacks for CookieStore Sessions
- here attecker can access out cookie data which is session id and our session id data is on server so attecker can access data on the server by our session id after original user log out.
- solution is set session expiry time. and Use a unique and unpredictable session ID and insted of storing sensitive data in session store in database.

#session fixation.
- Session fixation is a type of attack where an attacker sets a user's session ID to a known value before the user logs in, and then waits for the user to authenticate with that session ID. Once the user has authenticated, the attacker can use the known session ID to access the user's session and perform unauthorized actions on their behalf. 
- By regenerating the session ID upon user authentication, you can prevent session fixation attacks in your Rails application. - reset_session by this command we can do this.

#session expiry
- The section about session fixation introduced the problem of maintained sessions. An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions. A simple solution for this would be to add a created_at column to the sessions table. Now you can delete sessions that were created a long time ago.

#csrf - cross site request forgery
- type of attack that occurs when a malicious website or application sends a request to a different website or application that the user is logged into. The request appears to be legitimate because it includes the user's authentication credentials, such as cookies or session tokens.
- we can prevent this by csrf token.
protect_from_forgery with: :exception - This will include a security token in all forms and Ajax requests generated by Rails.

#Redirection and Files
- When redirecting a user to a new page, it is important to ensure that the URL is coming from a trusted source. If the URL is coming from user input, it is possible for an attacker to inject malicious code into the URL. This can then be used to redirect the user to a malicious website.
- To prevent this, it is important to use a whitelist of trusted URLs when redirecting users. This means that only URLs that are known to be safe should be allowed. Any other URLs should be blocked.

#file
- if an attacker can trick an application into opening a file that they control, they could then execute malicious code on the user's machine. To prevent this, it is important to only open files that are known to be safe. This can be done by using a whitelist of trusted file paths.
-  it is important to ensure that files are opened in the correct mode. For example, if a file is opened for reading, it should not be opened for writing as well. This can help to prevent an attacker from overwriting or deleting important files.

#File Downloads
- Simply pass a file name like "../../../etc/passwd" to download the server's login information. A simple solution against this, is to check that the requested file is in the expected directory:
- Another (additional) approach is to store the file names in the database and name the files on the disk after the ids in the database.




























