<%= form_with do |form| %>
  Form contents
<% end %>
- this is simple form. here it has hidden field called authenticity_token is a security feature of Rails called cross-site request forgery protection.
- because it is non get request. this token is avoid submitting a form or making a request to the server by attecker.
-The authenticity_token is a unique token that is generated by Rails for each form. It is then included in the form as a hidden field. When the form is submitted, 
Rails checks that the authenticity_token in the form matches the one that was generated for that user's session. If the tokens do not match, Rails will reject the request and the user will be redirected to an error page.

#url: my_specified_path - it will tells the form where to make the request.
#method: :get - by default it is post but we can change in form.	
#The :model argument of form_with allows us to bind the form builder object to a model object.

#helper in form_with
<%= form.text_area :message, size: "70x5" %>
<%= form.hidden_field :parent_id, value: "foo" %>
<%= form.password_field :password %>
<%= form.number_field :price, in: 1.0..20.0, step: 0.5 %>
<%= form.range_field :discount, in: 1..100 %>
<%= form.date_field :born_on %>
<%= form.time_field :started_at %>
<%= form.datetime_local_field :graduation_day %>
<%= form.month_field :birthday_month %>
<%= form.week_field :birthday_week %>
<%= form.search_field :name %>
<%= form.email_field :address %>
<%= form.telephone_field :phone %>
<%= form.url_field :homepage %>
<%= form.color_field :favorite_color %>

#The fields_for Helper - it will used to create additional form form for associated record without form tag
-  helper is used to build complex forms that involve associations between models. 
- the index option in the fields_for helper is used to keep track of the order and association of nested models within a form, 
#if we have restfull routing than it will easiar for us to use form_with

#If you have a singular resource, you will need to call resource and resolve for it to work with form_with
#Dealing with Namespaces
form_with model: [:admin, @article] - just like admin_article_path(@article)
	
#how pathch,put and delete work
most browsers don't support methods other than "GET" and "POST" when it comes to submitting forms.
Rails works around this issue by emulating other methods over POST with a hidden input named "_method", which is set to reflect the desired method
Similar to <form> elements, most browsers don't support overriding form methods declared through formmethod other than "GET" and "POST".
Rails works around this issue by emulating other methods over POST through a combination of formmethod, value, and name attributes:

#Making Select Boxes with Ease
<%= form.select :city, ["Berlin", "Chicago", "Madrid"] %>
<%= form.select :city, [["Berlin", "BE"], ["Chicago", "CHI"], ["Madrid", "MD"]] %> - here right side value stored in database
<%= form.select :city, [["Berlin", "BE"], ["Chicago", "CHI"], ["Madrid", "MD"]], selected: "CHI" %>  -  we can define selected option

#Option Groups
In some cases we may want to improve the user experience by grouping related options together. We can do so by passing a Hash (or comparable Array) to select:
<%= form.select :city,
      {
        "Europe" => [ ["Berlin", "BE"], ["Madrid", "MD"] ],
        "North America" => [ ["Chicago", "CHI"] ],
      },
      selected: "CHI" %> - preselected option functinality is provided.

#Select Boxes and Model Objects
@person = Person.new(city: "MD") - we can also predefine at time of object intialization.

#Time Zone and Country Select
<%= form.time_zone_select :time_zone %> - select options from a list of pre-defined ActiveSupport::TimeZone objects

#Using Date and Time Form Helpers
@person = Person.new(birth_date: Date.new(1995, 12, 21))
<%= form.date_select :birth_date %> - date define

#Select Boxes for Individual Temporal Components
<%= select_year 1999, prefix: "party" %>
select_month
select_day
select_hour, minute, second
	
#Choices from a Collection of Arbitrary Objects
- The collection_select Helper - we can chose city from databse
<%= form.collection_select :city_id, City.order(:name), :id, :name %>

#The collection_radio_buttons Helper
<%= form.collection_radio_buttons :city_id, City.order(:name), :id, :name %> - it will generate radio button for cities

#The collection_check_boxes Helper
<%= form.collection_check_boxes :city_id, City.order(:name), :id, :name %> - it will generate check box for cities

#Uploading Files
<%= form.file_field :picture %>
- The most important thing to remember with file uploads is that the rendered form's enctype attribute must be set to "multipart/form-data". 
This is done automatically if you use a file_field inside a form_with. You can also set the attribute manually
- The object in the params hash is an instance of ActionDispatch::Http::UploadedFile. 
The following snippet saves the uploaded file in #{Rails.root}/public/uploads under the same name as the original file.


#Customizing Form Builders
that extends the ActionView::Helpers::FormBuilder class. We are then overriding the default behavior of the text_field, email_field, password_field, and label methods to provide custom functionality.

#Forms to External Resources
<%= form_with url: 'http://farfar.away/form', authenticity_token: 'external_token' do %> - we can pass data to external resources with authentication token and without token also

#building complex form
accepts_nested_attributes_for :addresses - in user model
accepts_nested_attributes_for :addresses, allow_destroy: true - allow to destroy associated address.
<%= addresses_form.check_box :_destroy %> - we can also destroy associated adress by defineing destroy column 1 in table
creta form using nested form using field_for helper 
2.times { @person.addresses.build } - in controller we can mention that how many addresses we want.
params.require(:person).permit(:name, addresses_attributes: [:id, :kind, :street]) - mention in strong parameter

accepts_nested_attributes_for :addresses, reject_if: lambda {|attributes| attributes['kind'].blank?} - we can also prevent empty record

#Using Tag Helpers Without a Form Builder
<%= check_box_tag "accept" %> - without form builder	

#form_tag and form_for in rails
form_tag - on the other hand, is a lower-level helper method that allows you to create a form that submits data to a specified URL. 
It is typically used when you want to create a form that doesn't necessarily correspond to a model object.

form_for - On the other hand, form_for is a higher-level helper method that is used to create forms that are associated with a specific model. 

form_with - form_with is recommended when you want to create a form with additional security features and AJAX functionality.

<%= form.field_for :addresses do |address_form| %>
	<%= address_form.text_field :street %>
<% end %>

in model accepts_nested_attributes_for :addresses, allow_destroy: true

params.require(:user).permit(:name, addresses_attributes: [:id, :street])


#forms
form_tag
- lower level form method which create form only without any model
- need to define url to where form submitted. 
- two argument action and method.

form_for 
- it is for rails 6 older version
- take model object which is mendatory argument

form_with
- higher level form builder that provide more integration on model object 
- we can bind our model with form using model or without model also it will work
- if we are using restfull resources then it will automatically generate appropriate url for form submission based on current action
- three argument
