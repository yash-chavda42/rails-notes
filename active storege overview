#Active storege - Active Storage facilitates uploading files to a cloud storage service like Amazon S3, Google Cloud Storage, or Microsoft Azure Storage and attaching those files to Active Record objects. 
#need seperetly 
- libvips v8.6+ or ImageMagick for image analysis and transformations
- ffmpeg v3.4+ for video previews and ffprobe for video/audio analysis
- poppler or muPDF for PDF previews

#Active Storage uses three tables in your applicationâ€™s database
active_storage_blobs
active_storage_variant_records
active_storage_attachments - active_storage_attachments is a polymorphic join table that stores your model's class name. If your model's class name changes, you will need to run a migration on this table to update the underlying record_type to your model's new class name.

- after doing active_storage:install & rails db:migrate

#config.active_storage.service = :local - Tell Active Storage which service to use by setting
we can also configure - we can use all this storege for storing data
- amazon s3 service - gem "aws-sdk-s3", require: false
- Google Cloud Storage Service - gem "google-cloud-storage", "~> 1.11", require: false
- Microsoft Azure Storage Service - gem "azure-storage-blob", require: false

#Mirror Service
- You can keep multiple services in sync by defining a mirror service.
- To use the Mirror service, you need to configure your Active Storage service to use multiple storage services or locations. 
- primary service and secondary service
- When you upload a file using Active Storage, the file will be stored in both the primary and mirror services. Any subsequent operations on the file, such as creating variants or deleting the file, will be performed on both services as well. If one of the services becomes unavailable or fails, Active Storage will automatically fall back to using the other service to ensure that the files remain available.
-  New files are directly uploaded to the primary service. When a directly-uploaded file is attached to a record, a background job is enqueued to copy it to the secondary services.

#Attaching Files to Records
has_one_attached - sets up a one-to-one mapping between records and files. Each record can have one file attached to it.

#has_one_attached :avatar - we can declare column in model in which we are storing file.
bin/rails generate model User avatar:attachment - using attechment type we can assign type.
<%= form.file_field :avatar %> - we use file_field in html form.
user.avatar.attach(params[:avatar]) - to attech avatar.
user.avatar.attached? - determine whether a particular user has an avatar:
has_one_attached :avatar, service: :s3 - we can configure service in model

has_one_attached :avatar do |attachable|
   attachable.variant :thumb, resize_to_limit: [100, 100]
end 
here two version are store in storege one avtar and another is thumb which has 100 px size of the image

<%= image_tag user.avatar.variant(:thumb) %> - we can access this thumb image using this command
 
#has_many_attached - sets up a one-to-many relationship between records and files. Each record can have many files attached to it.
bin/rails generate model Message images:attachments - generate model here for message
@message.images.attach(params[:images]) - we can add new image
@message.images.attached? - this message has any image or not
- varient and srevice concept are same

#Attaching File/IO Objects
@message.images.attach(io: File.open('/path/to/file'), filename: 'file.pdf') - you may want to attach a file you generated on disk or downloaded from a user-submitted URL. You may also want to attach a fixture file in a model test.

#Removing Files
user.avatar.purge - Synchronously destroy the avatar and actual resource files
user.avatar.purge_later - Destroy the associated models and actual resource files async

#Serving Files
Active Storage supports two ways to serve files: redirecting and proxying.
- redirect mode
- To generate a permanent URL for a blob, you can pass the blob to the url_for view helper. 
- url_for(user.avatar) 
- /rails/active_storage/blobs/:signed_id/my-avatar.png
- This generates a URL with the blob's signed_id that is routed to the blob's RedirectController
- rails_blob_path(user.avatar, disposition: "attachment" - o create a download link, use the rails_blob_{path|url} helper.

- proxy mode





